) +
# scale_y_continuous(labels = scales::percent) +
coord_flip() +
theme_bw() +
theme(
panel.border = element_blank(),
plot.title = element_text(size = 12, face = "bold", color = "darkblue"),
legend.key = element_blank(),
# legend.position = "",
# legend.position = as.character(legend),
axis.text = element_text(size = 7, angle = 0, hjust = 1, colour = "black"),
axis.title = element_text(size = 8, face = 'bold'),
axis.ticks = element_blank()
) +
labs(title = "", x = "", y = yaxis)
}
#' Pie plot
#' @export
PlotPie <- function(data, key = 'key', value = 'value', colscheme = 'Blues', title = NULL, retain.order = F){
tmp <-
eval(substitute(
data %>%
group_by_(key) %>%
summarise(value_sum = round(sum(colname, na.rm = T))),
list(colname = as.symbol(value)))) %>%
mutate(prop = round(value_sum/sum(value_sum) * 100, 1))
tmp <- if (retain.order == T) tmp else arrange(tmp, desc(prop))
if (nrow(tmp) > 10) {
tmp1 <- tmp[1:7, ]
tmp2 <-
tmp[8:nrow(tmp), ] %>%
summarise(value_sum = sum(value_sum)) %>%
mutate(prop = round(value_sum/sum(tmp$value_sum) * 100, 1))
tmp1[8, 1] <- 'Other'
tmp1[8, 2:3] <- tmp2
tmp <- mutate(tmp1, pos = cumsum(prop) - 0.5 * prop)
tmp[[key]] <-
factor(tmp[[key]],
levels = c(tmp[[key]][nrow(tmp)],
tmp[[key]][-nrow(tmp)][order(tmp$prop[-nrow(tmp)])]))
} else {
tmp <- mutate(tmp, pos = cumsum(prop) - 0.5 * prop)
tmp[[key]] <- factor(tmp[[key]], levels = tmp[[key]])
}
tmp$charLab <- as.character(tmp[[key]])
TwoLines <- function(x) {
if (nchar(x) > 10) {
x <- gsub(' or ', '/\n', x)
x <- gsub(' ', '\n', x)
} else x
return(x)
}
tmp$charLab <- sapply(as.list(tmp$charLab), TwoLines)
for(i in 1:nrow(tmp)) tmp$label[i] <- paste0(tmp[i, 'charLab'], '\n', tmp[i, 'prop'], '%')
tmp[[key]] <- factor(tmp[[key]], levels = tmp[[key]])
ggplot(tmp, aes_string(x = 1, y = 'prop', fill = key)) +
geom_bar(width = 1, stat = 'identity', colour = 'white') +
#       scale_x_discrete(limits = c(0, 1)) +
#       geom_text(aes(x = 1.75, y = tmp$pos, label = tmp$label), colour = 'black') +
# scale_y_continuous(breaks = tmp$pos, labels = tmp$label) +
scale_y_continuous(breaks = tmp$pos, labels = NULL) +
scale_fill_manual(values = colScheme(colscheme)(nrow(tmp))) +
coord_polar('y', start = 0) +
theme_bw() +
theme(panel.border = element_blank(),
plot.title = element_text(size = 12, face = 'bold', color = 'darkblue'),
legend.key = element_blank(),
legend.position = '',
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.grid  = element_blank()) +
labs(x = '', y = '', title = ifelse(title %in% NULL, NULL, paste0(title)))
}
PrepareData
getwd()
source('app/functions.R')
read_excel
file_name <- '/Users/jonathanpolonsky/OneDrive/who/2014_2015_2016_pledges_and_contributions.xlsx'
df_raw <- read_excel(file_name, sheet = 'Contribution Data', skip = 1) %>% ExcludeEmpty
df_raw
df_extra <-
read_excel(file_name,
sheet = paste0('Soft pledges-other ctrbns ', year_selected()),
skip = 1) %>%
ExcludeEmpty
df_extra <-
read_excel(file_name,
sheet = paste0('Soft pledges-other ctrbns 2016'),
skip = 1) %>%
ExcludeEmpty
df_extra
df_filter <-
read_excel(file_name,
sheet = paste0('SRP 2016 funds requested'),
skip = 2) %>%
ExcludeEmpty
df_filter
df_filter <-
read_excel(file_name,
sheet = paste0('SRP 2016 funds requested'),
skip = 2) %>%
ExcludeEmpty
df_filter
PrepareData(df_raw, df_extra, df_filter)
tmp <- PrepareData(df_raw, df_extra, df_filter)
tmp <- PrepareData(df_raw, df_extra, df_filter)
tmp
PlotBar
source('~/Repositories/pledges/app/functions.R', echo=TRUE)
tmp[[1]]
PlotBar(data = tmp[[1]],
xvar = 'appeal',
yvar = 'Funded (%)',
yaxis = 'Funded (%)',
colscheme = 'Blues'
# NB this namespace (input$colours) relates to colours.R, not to call in PlotlyBarOutput above
)
tmp
source('~/Repositories/pledges/app/functions.R', echo=TRUE)
PlotBar(data = tmp[[1]],
xvar = 'appeal',
yvar = 'Funded (%)',
yaxis = 'Funded (%)',
colscheme = 'Blues'
# NB this namespace (input$colours) relates to colours.R, not to call in PlotlyBarOutput above
)
source('~/Repositories/pledges/app/functions.R', echo=TRUE)
PlotBar(data = tmp[[1]],
xvar = 'appeal',
yvar = 'Funded (%)',
yaxis = 'Funded (%)',
colscheme = 'Blues'
# NB this namespace (input$colours) relates to colours.R, not to call in PlotlyBarOutput above
)
tmp
tmp[[xvar]]
ggplot(tmp, aes_string(x = xvar, y = "yvar_sum", fill = xvar)) +
geom_bar(stat = "identity", colour = "black", size = .25) +
scale_fill_manual(
values = colScheme(colscheme)(nrow(tmp)),
guide = guide_legend(reverse = TRUE) # not working!
) +
# scale_y_continuous(labels = scales::percent) +
coord_flip() +
theme_bw() +
theme(
panel.border = element_blank(),
plot.title = element_text(size = 12, face = "bold", color = "darkblue"),
legend.key = element_blank(),
# legend.position = "",
# legend.position = as.character(legend),
axis.text = element_text(size = 7, angle = 0, hjust = 1, colour = "black"),
axis.title = element_text(size = 8, face = 'bold'),
axis.ticks = element_blank()
) +
labs(title = "", x = "", y = yaxis)
tmp[[xvar]]
tmp
source('~/Repositories/pledges/app/functions.R', echo=TRUE)
PlotBar(data = tmp[[1]],
xvar = 'appeal',
yvar = 'Funded (%)',
yaxis = 'Funded (%)',
colscheme = 'Blues'
# NB this namespace (input$colours) relates to colours.R, not to call in PlotlyBarOutput above
)
tmp
tmp[[xvar]]
nrow(tmp)
tmp
nrow(tmp)
tmp['yvar_sum']
tmp['yvar_sum']>0
tmp[tmp['yvar_sum']>0]
tmp[tmp$yvar_sum > 0, ]
nrow(tmp[tmp$yvar_sum > 0, ])
source('~/Repositories/pledges/app/functions.R', echo=TRUE)
PlotBar(data = tmp[[1]],
xvar = 'appeal',
yvar = 'Funded (%)',
yaxis = 'Funded (%)',
colscheme = 'Blues'
# NB this namespace (input$colours) relates to colours.R, not to call in PlotlyBarOutput above
)
source('~/Repositories/pledges/app/functions.R', echo=TRUE)
PlotBar(data = tmp[[1]],
xvar = 'appeal',
yvar = 'Funded (%)',
yaxis = 'Funded (%)',
colscheme = 'Blues'
# NB this namespace (input$colours) relates to colours.R, not to call in PlotlyBarOutput above
)
tmp[[xvar]]
factor(tmp[[xvar]], levels = rev(unique(tmp[[xvar]])))
tmp[[xvar]]
tmp
ggplot(tmp, aes_string(x = xvar, y = "yvar_sum", fill = xvar)) +
geom_bar(stat = "identity", colour = "black", size = .25) +
# scale_fill_manual(
#   # values = colScheme(colscheme)(nrow(tmp)),
#   values = colScheme(colscheme)(nrow(tmp[tmp$yvar_sum > 0, ])),
#   guide = guide_legend(reverse = TRUE) # not working!
# ) +
viridis::scale_fill_viridis(discrete = T) +
# scale_y_continuous(labels = scales::percent) +
coord_flip() +
theme_bw() +
theme(
panel.border = element_blank(),
plot.title = element_text(size = 12, face = "bold", color = "darkblue"),
legend.key = element_blank(),
# legend.position = "",
# legend.position = as.character(legend),
axis.text = element_text(size = 7, angle = 0, hjust = 1, colour = "black"),
axis.title = element_text(size = 8, face = 'bold'),
axis.ticks = element_blank()
) +
labs(title = "", x = "", y = yaxis)
factor(tmp[[xvar]], levels = rev(unique(tmp[[xvar]])))
tmp
xvar
tmp[[xvar]][tmp$yvar_sum>0]
factor(tmp[[xvar]][tmp$yvar_sum>0], levels = rev(unique(tmp[[xvar]][tmp$yvar_sum>0])))
tmp[[xvar]][tmp$yvar_sum>0] <- factor(tmp[[xvar]][tmp$yvar_sum>0], levels = rev(unique(tmp[[xvar]][tmp$yvar_sum>0])))
ggplot(tmp, aes_string(x = xvar, y = "yvar_sum", fill = xvar)) +
geom_bar(stat = "identity", colour = "black", size = .25) +
scale_fill_manual(
# values = colScheme(colscheme)(nrow(tmp)),
values = colScheme(colscheme)(nrow(tmp[tmp$yvar_sum > 0, ])),
guide = guide_legend(reverse = TRUE) # not working!
) +
# scale_y_continuous(labels = scales::percent) +
coord_flip() +
theme_bw() +
theme(
panel.border = element_blank(),
plot.title = element_text(size = 12, face = "bold", color = "darkblue"),
legend.key = element_blank(),
# legend.position = "",
# legend.position = as.character(legend),
axis.text = element_text(size = 7, angle = 0, hjust = 1, colour = "black"),
axis.title = element_text(size = 8, face = 'bold'),
axis.ticks = element_blank()
) +
labs(title = "", x = "", y = yaxis)
tmp[[xvar]] <- factor(tmp[[xvar]][tmp$yvar_sum>0], levels = rev(unique(tmp[[xvar]][tmp$yvar_sum>0])))
tmp[[xvar]][tmp$yvar_sum>0] <- factor(tmp[[xvar]][tmp$yvar_sum>0], levels = rev(unique(tmp[[xvar]][tmp$yvar_sum>0])))
source('~/Repositories/pledges/app/functions.R', echo=TRUE)
PlotBar(data = tmp[[1]],
xvar = 'appeal',
yvar = 'Funded (%)',
yaxis = 'Funded (%)',
colscheme = 'Blues'
# NB this namespace (input$colours) relates to colours.R, not to call in PlotlyBarOutput above
)
install.packages(c("R6", "shiny"))
install.packages("codetools", lib="/Users/jonathanpolonsky/Repositories/pledges/packrat/lib-R")
source('app/functions.R')
file_name <- '/Users/jonathanpolonsky/OneDrive/who/2014_2015_2016_pledges_and_contributions.xlsx'
df_raw <- read_excel(file_name, sheet = 'Contribution Data', skip = 1) %>% ExcludeEmpty
df_raw
df_extra <-
read_excel(file_name,
sheet = paste0('Soft pledges-other ctrbns 2016'),
skip = 1) %>%
ExcludeEmpty
df_filter <-
read_excel(file_name,
sheet = paste0('SRP 2016 funds requested'),
skip = 2) %>%
ExcludeEmpty
tmp <- PrepareData(df_raw, df_extra, df_filter)
tmp
PlotBar(data = tmp[[1]],
xvar = 'appeal',
yvar = 'Funded (%)',
yaxis = 'Funded (%)',
colscheme = 'Blues'
# NB this namespace (input$colours) relates to colours.R, not to call in PlotlyBarOutput above
)
PlotBar
tmp
df_extra
df_filter
df_filter <-
read_excel(file_name,
sheet = paste0('SRP 2016 funds requested'),
skip = 2) %>%
ExcludeEmpty
df_filter
PrepareData
tmp
tmp %>%
summarise(
appeal = 'Total', status = '-',
amount_requested = sum(amount_requested)
)
tmp %>%
summarise(
appeal = 'Total', status = '-',
amount_requested = sum(amount_requested)
)
tmp
tmp[1] %>%
summarise(
appeal = 'Total', status = '-',
amount_requested = sum(amount_requested)
)
tmp[1]
tmp[[1]] %>%
summarise(
appeal = 'Total', status = '-',
amount_requested = sum(amount_requested)
)
tmp[[1]] %>%
summarise(
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`)
)
tmp[[1]]
tmp[[1]] %>%
summarise(
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount requested`/`Amount received`
)
144381913/568999662
tmp[[1]] %>%
summarise(
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount requested`/`Amount received`*100
)
tmp[[1]] %>%
summarise(
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount received`/`Amount requested`*100
)
144381913/568999662
tmp[[1]] %>%
summarise(
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount received`/`Amount requested`*100
)
tmp[[1]] %>%
bind_rows(
summarise(
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount received`/`Amount requested`*100
)
)
tmp[[1]] %>%
bind_rows(.,
summarise(
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount received`/`Amount requested`*100
)
)
tmp[[1]] %>%
bind_rows(.,
summarise(tmp[[1]],
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount received`/`Amount requested`*100
)
)
tmp[[1]] %>%
bind_rows(.,
summarise(tmp[[1]],
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount received`/`Amount requested`*100
)
) %>% tail
tmp[[1]] %>%
bind_rows(
summarise(tmp[[1]],
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount received`/`Amount requested`*100
)
)
tmp[[1]]
tmp[[1]]$`Crisis type`
levels(tmp[[1]]$`Crisis type`)
levels(tmp[[1]]$`Crisis type`) <- c(levels(tmp[[1]]$`Crisis type`), '-')
levels(tmp[[1]]$`Crisis type`)
tmp[[1]]$`Crisis type`
tmp2 <-
tmp[[1]] %>%
bind_rows(
summarise(tmp[[1]],
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount received`/`Amount requested`*100
)
)
tmp2$`Crisis type`
levels(tmp2$`Crisis type`)
levels(tmp2$`Crisis type`) <- c(levels(tmp[[1]]$`Crisis type`), '-')
levels(tmp2$`Crisis type`)
tmp2$`Crisis type`
tmp2$`Crisis type` %>% class
tmp2$`Crisis type` <- factor(tmp2$`Crisis type`, levels = c(levels(tmp[[1]]$`Crisis type`), '-'))
tmp2$`Crisis type`
tmp2
tmp2 %>% tail
PlotBar(data = tmp2,
xvar = 'appeal',
yvar = 'Funded (%)',
yaxis = 'Funded (%)',
colscheme = 'Blues'
# NB this namespace (input$colours) relates to colours.R, not to call in PlotlyBarOutput above
)
shiny::runApp('app')
?round
runApp('app')
runApp('app')
tmp2
runApp('app')
runApp('app')
runApp('app')
runApp('app')
source('~/Repositories/pledges/deploy.R', echo=TRUE)
files
files <- c(dir("app", recursive = TRUE))
files
source('~/Repositories/pledges/deploy.R', echo=TRUE)
source('app/functions.R')
file_name <- '/Users/jonathanpolonsky/OneDrive/who/2014_2015_2016_pledges_and_contributions.xlsx'
df_raw <- read_excel(file_name, sheet = 'Contribution Data', skip = 1) %>% ExcludeEmpty
df_extra <-
read_excel(file_name,
sheet = paste0('Soft pledges-other ctrbns 2016'),
skip = 1) %>%
ExcludeEmpty
df_filter <-
read_excel(file_name,
sheet = paste0('SRP 2016 funds requested'),
skip = 2) %>%
ExcludeEmpty
tmp <- PrepareData(df_raw, df_extra, df_filter)
tmp2 <-
tmp[[1]] %>%
bind_rows(
summarise(tmp[[1]],
appeal = 'Total', `Crisis type` = '-',
`Amount requested` = sum(`Amount requested`),
`Amount received` = sum(`Amount received`),
`Funded (%)` = `Amount received`/`Amount requested`*100
)
)
tmp2
tibble()
tibble
?tibble
?tbl_df
tbl_df(tmp2)
tmp2
print.tibble
?print.tibble
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
install.packages("rpivotTable")
runApp('app')
install.packages("highcharter")
runApp('app')
install.packages("DT")
runApp('app')
runApp('app')
devtools::install_github('yihui/xaringan')
install.packages("devtools")
devtools::install_github('yihui/xaringan')
packrat::restore(prompt = FALSE)
??invoke
packrat::restore(prompt = FALSE)
install.packages("mnormt")
packrat::restore(prompt = FALSE)
install.packages(c("BH", "broom", "chron", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "ggplot2", "highcharter", "htmlwidgets", "jsonlite", "knitr", "openssl", "plotly", "psych", "quantmod", "rbokeh", "Rcpp", "reshape2", "rmarkdown", "rsconnect", "scales", "shiny", "stringr", "tidyr", "XML", "yaml", "zoo"))
packrat::snapshot()
?invoke
??invoke
list("01a", "01b") %>%
invoke(paste, ., sep = ".")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
list("01a", "01b") %>%
invoke(paste, ., sep = ".")
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
invoke_map(list(runif), list(list(n = 10), list(n = 5)))
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
