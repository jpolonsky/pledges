packrat::init()
packrat::restore(prompt = FALSE)
shiny::runApp()
runApp()
?plotly::ggplotly
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggplotly(ggiris)
source('functions.R')
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggplotly(ggiris)
library(plotly)
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggplotly(ggiris)
ggplotly(ggiris) %>% layout(showlegend = F)
ggplotly(ggiris) %>% layout(showlegend = T)
ggplotly(ggiris) %>% layout(showlegend = T)
ggplotly(ggiris, tooltip = c('y')) %>% layout(showlegend = T)
ggplotly(ggiris) %>% layout(showlegend = T)
ggplotly(ggiris, tooltip = c('y')) %>% layout(showlegend = T)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?suppressWarnings
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?callModule
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
2+3
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste(in_file$datapath, ext, sep = '.')
runApp('~/Repositories/testr/fileupload')
runApp('~/Repositories/testr/fileupload')
runApp('~/Repositories/testr/fileupload')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?shinyApp
